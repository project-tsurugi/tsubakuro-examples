plugins {
    id 'tsubakuro-examples.app-conventions'
}

tasks.register('runTpcc', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.tsurugidb.tsubakuro.examples.tpcc.Main'

    systemProperty 'com.tsurugidb.tsubakuro.jniverify', 'false'
    systemProperty 'tsurugi.dbname', findProperty('tsurugi.dbname') ?: 'ipc:tsurugi'

    systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', findProperty('loglevel') ?: 'info'
    systemProperty 'org.slf4j.simpleLogger.showThreadName', 'false'
    systemProperty 'org.slf4j.simpleLogger.showShortLogName', 'true'
    systemProperty 'org.slf4j.simpleLogger.levelInBrackets', 'true'
}

application {
    applicationName = 'tpcc'
    mainClass = 'com.tsurugidb.tsubakuro.examples.tpcc.Main'
    applicationDefaultJvmArgs = [
        '-Dtsurugi.dbname=ipc:tsurugi'
    ]
}

distTar {
    archiveFileName = "${project.name}.tar.gz"
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
    duplicatesStrategy 'exclude'
}
distZip.enabled = false

configurations {
	loaderContext
}

dependencies {
	loaderContext project(path: ':tpccLoader', configuration: 'tpccLoaderContent')
}

task copyFromLoaderProject(type:Copy, dependsOn: configurations.loaderContext) {
	from configurations.loaderContext.collect{ tarTree(it) }
	into "$buildDir/extracted"
}

task syncLoaderContent(type:Sync, dependsOn: copyFromLoaderProject) {
	from "$buildDir/extracted/tpccLoader"
	into "$buildDir/distAggregate"
}

if (project.hasProperty('tpccDataGenPath')) {
    task copyTpccDataGen(type:Copy) {
        from project.file("${tpccDataGenPath}")
        into "$buildDir/tpccDataGen"
    }
}

distributions {
	main {
		contents {
			from syncLoaderContent
            if (project.hasProperty('tpccDataGenPath')) {
                into('bin') {
                    from copyTpccDataGen
                }
            }
		}
	}
}
